[
  {
    "_id" : 1,
    "question" : " How will you improve the performance of a React Application?",
    "answer" : "1 Spreading props on DOM elements 2.  Use React.Fragments to Avoid Additional HTML Element Wrappers 3. Conditional rendering of components 4. Removing unnecessary await and use Promise.all() 5. Function/Stateless Components and React.PureComponent "
  },
  {
    "_id" : 2,
    "question" : "What are the different ways to manage a state in a React application?",
    "answer" : "React uses an observable object as the state that observes what changes are made to the state and helps the component behave accordingly. For example, if we update the state of any component like the following the webpage will not re-render itself because React State will not be able to detect the changes made"
  },
  {
    "_id" : 3,
    "question" : "How does prototypical inheritance work?",
    "answer" : "Prototype-based programming is a style of object-oriented programming in which behaviour reuse (known as inheritance) is performed via a process of reusing existing objects that serve as prototypes. This model can also be known as prototypal, prototype-oriented, classless, or instance-based programming."
  },
  {
    "_id" : 4,
    "question" : " You have an array of products. Each product has a name, price, description, etc. How will you implement a search to find products by name?",
    "answer" : "Steps for Search Implement to Find Products:                            Step-1:Import {useState} and set state variables. Step-2: Define a callback function and pass it down as a prop.  Step-3: Set an “onChange” event handler on the input field. That should be all it takes."
  },
  {
    "_id" : 5,
    "question" : " Why you do not set the state directly in React. For example, if you have const [products, setProducts] = useState([]). Why you do not set products = [...] instead, you use the setProducts",
    "answer" : "if we update the hook value like this: product = [...]; then it will show us an error because we declare/ destructuring the hook as constant (const); but if we use it as let then it will run or set its value. there is an issue. if we don't use setProducts to update the state then the component will not re-render. setProducts is done the asynchronous task. then it will merge the new value and replace the old value then re-render that component"
  },
  {
    "_id" : 6,
    "question" : " What is a unit test? Why should write unit tests?",
    "answer" : "One of the benefits of unit tests is that they isolate a function, class or method and only test that piece of code. Higher quality individual components create overall system resiliency. Thus, the result is reliable code. Unit tests also change the nature of the debugging process] "
  }
]